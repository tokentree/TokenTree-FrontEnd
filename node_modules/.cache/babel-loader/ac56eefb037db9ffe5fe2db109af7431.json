{"ast":null,"code":"import _toConsumableArray from\"/Users/bugrahangulculer/front-end/pancake-swap-interface-v1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/bugrahangulculer/front-end/pancake-swap-interface-v1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/Users/bugrahangulculer/front-end/pancake-swap-interface-v1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _WETH_ONLY;import{ChainId,JSBI,Percent,Token,WETH}from'@pancakeswap-libs/sdk';export var ROUTER_ADDRESS='0x0abA961F60B702f0C33DC4b560Efd2a322B0c077';// a list of tokens by chain\nexport var CAKE=new Token(ChainId.BSCTESTNET,'0xB8F5B50ed77596b5E638359d828000747bb3dd89',18,'CAKE','PancakeSwap Token');export var WBNB=new Token(ChainId.BSCTESTNET,'0xe0aA552A10d7EC8760Fc6c246D391E698a82dDf9',18,'WBNB','Wrapped BNB');export var DAI=new Token(ChainId.BSCTESTNET,'0x3Cf204795c4995cCf9C1a0B3191F00c01B03C56C',18,'DAI','Dai Stablecoin');export var BUSD=new Token(ChainId.BSCTESTNET,'0xE0dFffc2E01A7f051069649aD4eb3F518430B6a4',18,'BUSD','Binance USD');export var USDT=new Token(ChainId.BSCTESTNET,'0x7afd064DaE94d73ee37d19ff2D264f5A2903bBB0',18,'USDT','Tether USD');export var ETH=new Token(ChainId.BSCTESTNET,'0xE282a15DBad45e3131620C1b8AF85B7330Cb3b4B',18,'ETH','Binance-Peg Ethereum Token');var WETH_ONLY=(_WETH_ONLY={},_defineProperty(_WETH_ONLY,ChainId.MAINNET,[WETH[ChainId.MAINNET]]),_defineProperty(_WETH_ONLY,ChainId.BSCTESTNET,[WETH[ChainId.BSCTESTNET]]),_WETH_ONLY);// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.BSCTESTNET,_toConsumableArray(WETH_ONLY[ChainId.BSCTESTNET])));/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */export var CUSTOM_BASES=_defineProperty({},ChainId.BSCTESTNET,{});// used for display in the default list when adding liquidity\nexport var SUGGESTED_BASES=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.BSCTESTNET,_toConsumableArray(WETH_ONLY[ChainId.BSCTESTNET])));// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.BSCTESTNET,_toConsumableArray(WETH_ONLY[ChainId.BSCTESTNET])));export var PINNED_PAIRS=_defineProperty({},ChainId.BSCTESTNET,[// [CAKE, WBNB],\n// [BUSD, USDT],\n// [DAI, USDT],\n]);export var NetworkContextName='NETWORK';// default allowed slippage, in bips\nexport var INITIAL_ALLOWED_SLIPPAGE=80;// 20 minutes, denominated in seconds\nexport var DEFAULT_DEADLINE_FROM_NOW=60*20;// one basis point\nexport var ONE_BIPS=new Percent(JSBI.BigInt(1),JSBI.BigInt(10000));export var BIPS_BASE=JSBI.BigInt(10000);// used for warning states\nexport var ALLOWED_PRICE_IMPACT_LOW=new Percent(JSBI.BigInt(100),BIPS_BASE);// 1%\nexport var ALLOWED_PRICE_IMPACT_MEDIUM=new Percent(JSBI.BigInt(300),BIPS_BASE);// 3%\nexport var ALLOWED_PRICE_IMPACT_HIGH=new Percent(JSBI.BigInt(500),BIPS_BASE);// 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport var PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN=new Percent(JSBI.BigInt(1000),BIPS_BASE);// 10%\n// for non expert mode disable swaps above this\nexport var BLOCKED_PRICE_IMPACT_NON_EXPERT=new Percent(JSBI.BigInt(1500),BIPS_BASE);// 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport var MIN_ETH=JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(16));// .01 ETH","map":{"version":3,"sources":["/Users/bugrahangulculer/front-end/pancake-swap-interface-v1/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","ROUTER_ADDRESS","CAKE","BSCTESTNET","WBNB","DAI","BUSD","USDT","ETH","WETH_ONLY","MAINNET","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk'\n\nexport const ROUTER_ADDRESS = '0x0abA961F60B702f0C33DC4b560Efd2a322B0c077'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\nexport const CAKE = new Token(ChainId.BSCTESTNET, '0xB8F5B50ed77596b5E638359d828000747bb3dd89', 18, 'CAKE', 'PancakeSwap Token')\nexport const WBNB = new Token(ChainId.BSCTESTNET, '0xe0aA552A10d7EC8760Fc6c246D391E698a82dDf9', 18, 'WBNB', 'Wrapped BNB')\nexport const DAI = new Token(ChainId.BSCTESTNET, '0x3Cf204795c4995cCf9C1a0B3191F00c01B03C56C', 18, 'DAI', 'Dai Stablecoin')\nexport const BUSD = new Token(ChainId.BSCTESTNET, '0xE0dFffc2E01A7f051069649aD4eb3F518430B6a4', 18, 'BUSD', 'Binance USD')\nexport const USDT = new Token(ChainId.BSCTESTNET, '0x7afd064DaE94d73ee37d19ff2D264f5A2903bBB0', 18, 'USDT', 'Tether USD')\nexport const ETH = new Token(ChainId.BSCTESTNET, '0xE282a15DBad45e3131620C1b8AF85B7330Cb3b4B', 18, 'ETH', 'Binance-Peg Ethereum Token')\n\nconst WETH_ONLY: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]],\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.BSCTESTNET]: [...WETH_ONLY[ChainId.BSCTESTNET]],\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.BSCTESTNET]: {},\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.BSCTESTNET]: [...WETH_ONLY[ChainId.BSCTESTNET]],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.BSCTESTNET]: [...WETH_ONLY[ChainId.BSCTESTNET]],\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.BSCTESTNET]: [\n    // [CAKE, WBNB],\n    // [BUSD, USDT],\n    // [DAI, USDT],\n  ],\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 80\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\n"]},"metadata":{},"sourceType":"module"}