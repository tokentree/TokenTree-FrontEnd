{"ast":null,"code":"import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk';\nexport const ROUTER_ADDRESS = '0x9E4c14403d7d9A8A782044E86a93CAE09D7B2ac9'; // a list of tokens by chain\n\nexport const CAKE = new Token(ChainId.BSCTESTNET, '0xB8F5B50ed77596b5E638359d828000747bb3dd89', 18, 'CAKE', 'PancakeSwap Token');\nexport const WBNB = new Token(ChainId.BSCTESTNET, '0xe0aA552A10d7EC8760Fc6c246D391E698a82dDf9', 18, 'WBNB', 'Wrapped BNB'); // export const DAI = new Token(ChainId.BSCTESTNET, '0x3Cf204795c4995cCf9C1a0B3191F00c01B03C56C', 18, 'DAI', 'Dai Stablecoin')\n// export const BUSD = new Token(ChainId.BSCTESTNET, '0xE0dFffc2E01A7f051069649aD4eb3F518430B6a4', 18, 'BUSD', 'Binance USD')\n// export const USDT = new Token(ChainId.BSCTESTNET, '0x7afd064DaE94d73ee37d19ff2D264f5A2903bBB0', 18, 'USDT', 'Tether USD')\n// export const ETH = new Token(ChainId.BSCTESTNET, '0xE282a15DBad45e3131620C1b8AF85B7330Cb3b4B', 18, 'ETH', 'Binance-Peg Ethereum Token')\n\nconst WETH_ONLY = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]]\n}; // used to construct intermediary pairs for trading\n\nexport const BASES_TO_CHECK_TRADES_AGAINST = { ...WETH_ONLY,\n  [ChainId.BSCTESTNET]: [...WETH_ONLY[ChainId.BSCTESTNET]]\n};\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\n\nexport const CUSTOM_BASES = {\n  [ChainId.BSCTESTNET]: {}\n}; // used for display in the default list when adding liquidity\n\nexport const SUGGESTED_BASES = { ...WETH_ONLY,\n  [ChainId.BSCTESTNET]: [...WETH_ONLY[ChainId.BSCTESTNET]]\n}; // used to construct the list of all pairs we consider by default in the frontend\n\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = { ...WETH_ONLY,\n  [ChainId.BSCTESTNET]: [...WETH_ONLY[ChainId.BSCTESTNET]]\n};\nexport const PINNED_PAIRS = {\n  [ChainId.BSCTESTNET]: [// [CAKE, WBNB],\n    // [BUSD, USDT],\n    // [DAI, USDT],\n  ]\n};\nexport const NetworkContextName = 'NETWORK'; // default allowed slippage, in bips\n\nexport const INITIAL_ALLOWED_SLIPPAGE = 80; // 20 minutes, denominated in seconds\n\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20; // one basis point\n\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000); // used for warning states\n\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\n\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\n\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\n\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\n\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\n\nexport const MIN_ETH = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 ETH","map":{"version":3,"sources":["/Users/bulut/Documents/Collections/EVM/Pancake/pancake-swap-testnet/pancake-swap-interface-v1/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","ROUTER_ADDRESS","CAKE","BSCTESTNET","WBNB","WETH_ONLY","MAINNET","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk'\n\nexport const ROUTER_ADDRESS = '0x9E4c14403d7d9A8A782044E86a93CAE09D7B2ac9'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\nexport const CAKE = new Token(ChainId.BSCTESTNET, '0xB8F5B50ed77596b5E638359d828000747bb3dd89', 18, 'CAKE', 'PancakeSwap Token')\nexport const WBNB = new Token(ChainId.BSCTESTNET, '0xe0aA552A10d7EC8760Fc6c246D391E698a82dDf9', 18, 'WBNB', 'Wrapped BNB')\n// export const DAI = new Token(ChainId.BSCTESTNET, '0x3Cf204795c4995cCf9C1a0B3191F00c01B03C56C', 18, 'DAI', 'Dai Stablecoin')\n// export const BUSD = new Token(ChainId.BSCTESTNET, '0xE0dFffc2E01A7f051069649aD4eb3F518430B6a4', 18, 'BUSD', 'Binance USD')\n// export const USDT = new Token(ChainId.BSCTESTNET, '0x7afd064DaE94d73ee37d19ff2D264f5A2903bBB0', 18, 'USDT', 'Tether USD')\n// export const ETH = new Token(ChainId.BSCTESTNET, '0xE282a15DBad45e3131620C1b8AF85B7330Cb3b4B', 18, 'ETH', 'Binance-Peg Ethereum Token')\n\nconst WETH_ONLY: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]],\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.BSCTESTNET]: [...WETH_ONLY[ChainId.BSCTESTNET]],\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.BSCTESTNET]: {},\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.BSCTESTNET]: [...WETH_ONLY[ChainId.BSCTESTNET]],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.BSCTESTNET]: [...WETH_ONLY[ChainId.BSCTESTNET]],\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.BSCTESTNET]: [\n    // [CAKE, WBNB],\n    // [BUSD, USDT],\n    // [DAI, USDT],\n  ],\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 80\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\n"]},"metadata":{},"sourceType":"module"}